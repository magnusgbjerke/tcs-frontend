import { getPath, Product, ValidTypes } from "@/lib/data";
import type { Metadata } from "next";

export async function generateMetadata({
  params,
}: {
  params: Promise<{ category: string[] }>;
}): Promise<Metadata> {
  const { category } = await params;

  const response = await fetch(getPath("/api/product/valid-types"));

  const validTypes: ValidTypes = await response.json();

  switch (category.length) {
    case 1:
      if (validTypes.customerCategory.includes(category[0])) {
        return {
          title: `${capitalizeFirstLetter(category[0])} | TCS`,
          description: "Generated by create next app",
        };
      } else {
        const response = await fetch(
          `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/product/${category[0]}`,
        );
        if (!response.ok) {
          return {
            title: `Not found | TCS`,
            description: "Generated by create next app",
          };
        }
        const product: Product = await response.json();

        return {
          title: `${product.name} | TCS`,
          description: "Generated by create next app",
        };
      }

    default:
      return {
        title: `${capitalizeFirstLetter(category[category.length - 1])} | TCS`,
        description: "Generated by create next app",
      };
  }

  function capitalizeFirstLetter(word: string): string {
    if (!word) return "";
    return word.charAt(0).toUpperCase() + word.slice(1);
  }
}

export default async function Layout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return children;
}
