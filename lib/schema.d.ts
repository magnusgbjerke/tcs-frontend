/** npx openapi-typescript http://localhost:8080/v3/api-docs -o lib/schema.d.ts
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/order": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get active order
     * @description Gets the active(un-paid) order of the user
     */
    get: operations["getActiveOrder"];
    /**
     * Update order
     * @description Update order.
     */
    put: operations["updateOrder"];
    /**
     * Create order
     * @description Create order.
     */
    post: operations["createOrder"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/order/checkout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Checkout for the order
     * @description Brings the order to checkout where it will be paid. Using this endpoint changes the order status from un-paid to paid.
     */
    patch: operations["checkoutOrder"];
    trace?: never;
  };
  "/api/product": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get products
     * @description Retrieves a list of all products. It is possible to search based on name, customerCategory, productCategory and/or type
     */
    get: operations["getProducts"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/product/{productId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get product
     * @description Retrieves a product.
     */
    get: operations["getProduct"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/product/valid-types": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get valid types
     * @description Retrieves all valid types.
     */
    get: operations["getValidTypes"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    CreateOrder: {
      /** @example velora-houndstooth-blazer-i-regular-fit */
      productId?: string;
      /** @example M */
      sizeName?: string;
      /**
       * Format: int32
       * @example 3
       */
      quantity?: number;
    };
    ErrorResponse: {
      /** Format: int32 */
      status?: number;
      message?: string;
      path?: string;
      /** Format: date-time */
      timestamp?: string;
      link?: string;
    };
    Order: {
      /** Format: date-time */
      orderCreated?: string;
      orderLines?: components["schemas"]["OrderLine"][];
      paid?: boolean;
    };
    OrderLine: {
      product?: components["schemas"]["Product"];
      /** @example M */
      sizeName?: string;
      /**
       * Format: int32
       * @example 3
       */
      quantity?: number;
    };
    Product: {
      /** @example velora-houndstooth-blazer-i-regular-fit */
      id: string;
      /** @example Houndstooth Blazer i Regular Fit */
      name: string;
      /** @example Velora */
      brand: string;
      /** @example A stylish and sophisticated houndstooth-patterned blazer with a regular fit, perfect for both casual and formal occasions. */
      description: string;
      /** @example 3.7 */
      rating: number;
      /** @example hoodie-axe.jpeg */
      image: string;
      /** @example shoes */
      type: string;
      /** @example men */
      customerCategory: string;
      /** @example footwear */
      productCategory: string;
      /** @example 799 */
      price: number;
      stock: components["schemas"]["Stock"][];
    };
    Stock: {
      /** @example small */
      size: string;
      /**
       * Format: int32
       * @example 10
       */
      quantity: number;
    };
    ValidTypes: {
      /** @example [men, women, kids] */
      customerCategory: string[];
      /** @example [tops, bottoms, footwear] */
      productCategory: string[];
      /** @example [hoodies, pants, shoes] */
      type: string[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getActiveOrder: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Order"];
        };
      };
    };
  };
  updateOrder: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOrder"][];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createOrder: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOrder"][];
      };
    };
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  checkoutOrder: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getProducts: {
    parameters: {
      query?: {
        search?: string;
        customerCategory?: string;
        productCategory?: string;
        type?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
    };
  };
  getProduct: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        productId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
    };
  };
  getValidTypes: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidTypes"];
        };
      };
    };
  };
}
